openapi: 3.0.0
info:
  title: Art Catalog API
  description: REST API for Art Catalog
  version: 0.0.1
servers:
  - url: http://localhost:5000/api/v1
    description: Local development server
components:
  schemas:
    Image:
      type: object
      properties:
        id:
          type: integer
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        imagesUrls:
          type: array
          items:
            type: string
        originalUrl:
          type: string
        tags:
          type: array
          items:
            $ref: "#/components/schemas/Tag"
        uploadedBy:
          $ref: "#/components/schemas/User"
        uploaderId:
          type: integer
        author:
          $ref: "#/components/schemas/Author"
        authorId:
          type: integer
        likedBy:
          type: array
          items:
            $ref: "#/components/schemas/User"
    Tag:
      type: object
      properties:
        id:
          type: integer
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        title:
          type: string
        images:
          type: array
          items:
            $ref: "#/components/schemas/Image"
    User:
      type: object
      properties:
        id:
          type: integer
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        email:
          type: string
        username:
          type: string
        password:
          type: string
        verificationToken:
          type: string                  
        authToken:
          type: string
        images:
          type: array
          items:
            $ref: "#/components/schemas/Image"
        author:
          $ref: "#/components/schemas/Author"
        authorId:
          type: integer
        likes:
          type: array
          items:
            $ref: "#/components/schemas/Image"
    Author:
      type: object
      properties:
        id:
          type: integer
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        name:
          type: string
        urls:
          type: array
          items:
            $ref: "#/components/schemas/WebsiteUrl"
        images:
          type: array
          items:
            $ref: "#/components/schemas/Image"
        user:
          $ref: "#/components/schemas/User"
    WebsiteUrl:
      type: object
      properties:
        id:
          type: integer
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        title:
          type: string
        url:
          type: string
        author:
          $ref: "#/components/schemas/Author"
        authorId:
          type: integer
  securitySchemes:
    JWT:
      scheme: bearer
      type: http
      bearerFormat: jwt
paths:
  /auth/login:
    post:
      summary: Login user
      operationId: login
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
      responses:
        '200':
          description: User data
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
  /auth/register:
    post:
      summary: Register user
      operationId: register
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                username:
                  type: string
                password:
                  type: string
      responses:
        '200':
          description: User data
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
  /auth/logout:
    post:
      summary: Logout user
      operationId: logout
      security:
        - JWT: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: string
                example: "Success"
  /auth/resend-verification:
    post:
      summary: Resend verification token to email
      operationId: resendVerification
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
      responses:
        '200':
          description: Updated user
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
  /auth/verify/{verificationToken}:
    get:
      summary: Verify user account
      operationId: verifyUser
      parameters:
        - in: path
          name: verificationToken
          schema:
            type: string
          required: true
          description: Verification token
      responses:
        '200':
          description: Updated user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

  /authors:
    get:
      summary: Search authors
      operationId: searchAuthors
      parameters:
        - in: query
          name: q
          schema:
            type: string
          required: true
        - in: query
          name: page
          schema:
            type: number
          required: true
      responses:
        '200':
          description: Authors
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: "#/components/schemas/Author"
                  count:
                    type: number
                  page:
                    type: number
                  perPage:
                    type: number
                  pagesCount:
                    type: number
  /authors/{authorId}:
    get:
      summary: Get author by id
      operationId: getAuthorById
      parameters:
        - in: path
          name: authorId
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Author
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Author"
  /authors/{authorId}/images:
    get:
      summary: Get author works
      operationId: getAuthorWorks
      parameters:
        - in: path
          name: authorId
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Author works
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Image"
  
  /images:
    post:
      summary: Create new image
      operationId: createImage
      security:
        - JWT: []
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                image:
                  type: string
                  format: binary
                author:
                  type: string
                tags:
                  type: array
                  items:
                    type: string
                originalUrl:
                  type: string
      responses:
        '200':
          description: New image
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Image"
    get:
      summary: Search images
      operationId: searchImages
      parameters:
        - in: query
          name: q
          schema:
            type: string
          required: true
        - in: query
          name: page
          schema:
            type: number
          required: true
      responses:
        '200':
          description: Images
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: "#/components/schemas/Image"
                  count:
                    type: number
                  page:
                    type: number
                  perPage:
                    type: number
                  pagesCount:
                    type: number
  /images/{imageId}:
    get:
      summary: Get image by id
      operationId: getImageById
      parameters:
        - in: path
          name: imageId
          schema:
            type: number
          required: true
      responses:
        '200':
          description: Image
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Image"
  
  /users/{userId}:
    get:
      summary: Get user by id
      operationId: getUserById
      parameters:
        - in: path
          name: userId
          schema:
            type: number
          required: true
      responses:
        '200':
          description: User
          content:
            application/json:
              schema: 
                $ref: "#/components/schemas/User"
  /users/{userId}/likes:
    get:
      summary: Get user likes
      operationId: getUserLikes
      parameters:
        - in: path
          name: userId
          schema:
            type: number
          required: true
      responses:
        '200':
          description: User likes
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Image"
  /users/{userId}/uploads:
    get:
      summary: Get user uploads
      operationId: getUserUploads
      parameters:
        - in: path
          name: userId
          schema:
            type: number
          required: true
      responses:
        '200':
          description: User uploads
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Image"