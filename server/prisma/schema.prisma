// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Image {
  id             Int      @id @default(autoincrement())
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  originalWidth  Int
  originalHeight Int
  thumbnailUrl   String
  previewUrl     String
  originalUrl    String
  post           Post?    @relation(fields: [postId], references: [id])
  postId         Int?
}

model Post {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  images     Image[]
  sourceUrl  String?
  tags       Tag[]
  uploadedBy User     @relation(fields: [uploaderId], references: [id])
  uploaderId Int
  author     Author   @relation(fields: [authorId], references: [id])
  authorId   Int
  likedBy    User[]   @relation(name: "likes")
  views      Int      @default(0)
}

model Tag {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  title     String   @unique
  posts     Post[]
}

model User {
  id                Int      @id @default(autoincrement())
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  email             String   @unique
  username          String   @unique
  password          String
  verificationToken String?  @unique
  authToken         String?  @unique
  posts             Post[]
  author            Author?  @relation(fields: [authorId], references: [id])
  authorId          Int?     @unique
  likes             Post[]   @relation("likes")
}

model Author {
  id        Int          @id @default(autoincrement())
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  name      String       @unique
  urls      WebsiteUrl[]
  posts     Post[]
  user      User?
}

model WebsiteUrl {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  title     String
  url       String
  author    Author   @relation(fields: [authorId], references: [id])
  authorId  Int
}
